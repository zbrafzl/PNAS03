
@{
    ViewBag.Title = "ApplicantSearchJoin";
    Layout = "~/Areas/nadmin/Views/Shared/_Layout.cshtml";
}
@model Prp.Sln.ApplicantStatusModel
<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
@section RenderCss{

    <style>
        .imgView {
            height: 50px;
            width: 45px;
        }
    </style>

}


@section RenderScript{

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
    <script>
        var countryTypeId = 0, perPageRecords = 10, statusId = 0
            , pageNum = 1, totalCount = 0, obj = {}, inductionId = 0;
        $(document).ready(function () {
			populate();
            statusId = ConvertToInt($("#hfdStatusId").val());
            inductionId = ConvertToInt($("#hfdInductionId").val());
            $("#ddlStatus").val(statusId);

			$('#ddlInduction').change(function () {
                populate();
            });




            SearchApplicant();

			$("#divDownload").show().change();

			$('#exportButton').click(function () {
                // Get the values of the hidden fields
                var id1 = 12;
                var id2 = 193;
                var id3 = 1;
                var id4 = ConvertToInt($("#hfdPhaseId").val());;
                var id5 = "";

                // Make AJAX request to controller action with all three IDs


                var resp = CallActionGet("/ApplicantAdmin/GetDataForExport?inductionId=" + id1 + "&statusTypeId=" + id2 + "&statusId=" + id3 + "&phaseId=" + id4 +"&option="+id5);

                //exportToExcel(resp);
				downloadExcelFromJson(resp, 'data');

                debugger;

            });

			$('#exportButtonSeats').click(function () {
                // Get the values of the hidden fields
                var id1 = 12;
                var id2 = 1;
                var id3 = 1;
                var id4 = 1;
                var id5 = "";

                // Make AJAX request to controller action with all three IDs


                var resp = CallActionGet("/ApplicantAdmin/GetDataForExport?inductionId=" + id1 + "&statusTypeId=" + id2 + "&statusId=" + id3 + "&phaseId=" + id4 +"&option="+id5);

                //exportToExcel(resp);
				downloadExcelFromJson(resp, 'data');

                debugger;

            });

            $(document).on('click', '.tbRow', function () {
                //alert(userTypeId);
                if (userTypeId == 69) {
					debugger;
                    var applicantId = ConvertToInt($(this).attr("id"));

                    var statusTypeId = ConvertToInt($("#hfdStatusTypeId").val())

                    var url = "";

                    if (statusTypeId == 73) {

                        url = "/admin/voucher-detail?applicantId=" + applicantId;
                    }
					else if (statusTypeId == 193) {

                        url = "/admin/addMigrationCandidate?applicantId=" + applicantId;
                    }
                    else {
						if(statusTypeId == 201)
						{
							url = "/admin/applicant-join-add?applicantId=" + applicantId;
						}
						else if(statusTypeId == 202)
						{
							url = "/admin/applicant-join-add?applicantId=" + applicantId;
						}
                    }
					if(url != "")
					{
						window.open(url, '_blank');
					}


                }
				else
				{
					var applicantId = ConvertToInt($(this).attr("id"));
					var statusTypeId = ConvertToInt($("#hfdStatusTypeId").val());
					debugger;
				}
            });


            $(document).on('click', '#btnSearch', function () {
                SearchApplicant();
            });

            $(document).keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    SearchApplicant();
                }
            });

            $(document).on('click', '.liPage', function () {

                var id = ConvertToInt($(this).closest('li').attr("id"));

                $(".liclick").removeClass("current");

                var pageNo = id;// ConvertToInt($(this).val());

                if (pageNo == 0) {

                    if ($(this).attr("type") == "first") {

                        pageNo = 1;
                    }
                    else
                        if ($(this).attr("type") == "last") {

                            var lastPage = Math.ceil(totalCount / perPageRecords);
                            pageNo = lastPage;
                        }
                }
                pageNum = pageNo;

                SearchApplicant();

				$("#divDownload").show();

            });

            $('#exportButton').click(function () {
                // Get the values of the hidden fields
                var id1 = ConvertToInt($("#hfdInductionId").val());
                var id2 = ConvertToInt($("#hfdStatusTypeId").val());
                var id3 = ConvertToInt($("#hfdStatusId").val());
                var id4 = ConvertToInt($("#hfdPhaseId").val());
                var id5 = ConvertToString($("#txtSearch").val());

                // Make AJAX request to controller action with all three IDs


                var resp = CallActionGet("/ApplicantAdmin/GetDataForExport?inductionId=" + id1 + "&statusTypeId=" + id2 + "&statusId=" + id3 + "&phaseId=" + id4 + "&option=" + id5);

                exportToExcel(resp);

                debugger;

            });

        });

		function jsonToCsv(jsonData) {
			// Convert JSON data to CSV format
			let csvContent = '';
			// Extract column headers from the first object in the array
			const headers = Object.keys(jsonData[0]);
			// Join column headers with comma as CSV header row
			csvContent += headers.join(',') + '\n';
			// Iterate over JSON data and convert each object to CSV row
			jsonData.forEach((row) => {
				// Extract values from the object and join them with comma
				const values = headers.map((header) => {
					// Handle cases where values may contain commas or quotes
					let value = row[header];
					// If value contains double quotes, escape them
					if (typeof value === 'string' && value.includes('"')) {
						value = value.replace(/"/g, '""');
					}
					// If value contains commas, enclose it in double quotes
					if (typeof value === 'string' && value.includes(',')) {
						value = `"${value}"`;
					}
					return value;
				});
				csvContent += values.join(',') + '\n';
			});
			return csvContent;
        }

        function exportToExcel(data) {
            // Convert JSON data to Excel format
            // For simplicity, let's assume data is already in Excel format
            // You can replace this with appropriate code to format and export data
            // Example:
            var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'data.xlsx';
            link.click();
        }

		function downloadExcelFromJson(jsonData, fileName) {
			// Convert JSON data to CSV format
			const csvContent = jsonToCsv(jsonData);

			// Create a Blob object from the CSV data
			const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });

			// Create a link element to trigger the download
			const link = document.createElement('a');
			if (link.download !== undefined) { // feature detection
				// Create a link that points to the Blob URL
				const url = URL.createObjectURL(blob);
				link.setAttribute('href', url);
				// Set the download attribute (filename)
				link.setAttribute('download', fileName + '.csv');
				// Append the link to the body
				document.body.appendChild(link);
				// Trigger the download by simulating a click
				link.click();
				// Remove the link from the DOM
				document.body.removeChild(link);
			} else {
				console.error("Downloading is not supported in this browser.");
			}
		}

		function exportToExcel() {
			// Get the selected values from the select lists

			var selectList1Text = document.getElementById('ddlInduction').options[document.getElementById('ddlInduction').selectedIndex].text;
			var selectList2Text = document.getElementById('ddlCollege').options[document.getElementById('ddlCollege').selectedIndex].text;

			var fileName = selectList1Text + "_" + selectList2Text + "_data.xlsx";

			var selectList1Value = document.getElementById('ddlInduction').value;
			var selectList2Value = document.getElementById('ddlCollege').value;

			// Create a new Workbook
			var wb = XLSX.utils.book_new();

			// Get the table element
			var table = document.getElementById('tblPanel');

			// Convert the table to a worksheet
			var ws = XLSX.utils.table_to_sheet(table);

			// Add the selected values to the worksheet
			/*
			ws['A1'] = { v: 'Induction', t: 's' };
			ws['B1'] = { v: selectList1Value, t: 's' };
			ws['A2'] = { v: 'College', t: 's' };
			ws['B2'] = { v: selectList2Value, t: 's' };
			*/
			// Add hidden columns to the worksheet
			var numColumns = table.rows[0].cells.length;
			var hiddenColumnIndex = 1; // Adjust the index as per your requirement
			/*
			for (var i = 0; i < numColumns; i++) {
				var headerText = table.rows[0].cells[i].textContent.trim();
				if (headerText.startsWith('Hidden')) {
					ws[XLSX.utils.encode_cell({ r: 0, c: hiddenColumnIndex })] = { v: headerText, t: 's' };
					hiddenColumnIndex++;
				}
			}
			*/
			// Add the worksheet to the workbook
			XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

			// Save the workbook as an Excel file
			XLSX.writeFile(wb, fileName);
		}

		function populate() {
			var selectedIndex = $('#ddlInduction').val();
			//alert(selectedIndex);
			$.ajax({
				url: '@Url.Action("PopulateSecondList", "ApplicantAdmin")',
				type: 'GET',
				data: { selectedIndex: selectedIndex },
				success: function (result) {
					$('#ddlCollege').empty();
					$.each(result, function (index, item) {
						$('#ddlCollege').append($('<option>').text(item.Text).attr('value', item.Value));
					});
				},
				error: function () {
					alert('Error occurred while fetching data.');
				}
			});
		}

        function SearchApplicant() {

            var rowHtml = "";

            //$("#divDownload").hide();

            $("#tbPanel").html("");

            obj = {};
            obj.top = perPageRecords;
            obj.pageNum = pageNum;
            obj.statusTypeId = ConvertToInt($("#hfdStatusTypeId").val());
            //obj.statusId = ConvertToInt($("#ddlStatus").val());
            obj.statusId = @Convert.ToInt32(Session["SelectedStatusID"]);
            obj.inductionId = inductionId;
            obj.phaseId = @Model.loggedInUser.userId;

			if($("#txtSearch").val()!=null && $("#txtSearch").val().length > 0)
			{
				debugger;
				obj.search = ConvertToString($("#txtSearch").val());
			}
			else{
				obj.search = $("#ddlInduction").val() + '-' + $("#ddlCollege").val();
			}

			console.log(obj);
			if(obj.search === 'undefined-undefined')
			{
				obj.search = '';
			}
            //alert('clicked');
            var url = "/ApplicantAdmin/ApplicantSearchSimpleJoin";

			//debugger;
            var list = CallActionPost(url, obj);
            var html = "";

            var singleHtml = "", objItem = {};

            if (obj.statusTypeId != 131) {
                //$(".displayComments").hide();
            }

			console.log(list);
            if (list != null && list.length > 0) {

                totalCount = list[0].totalCount;


                //$("#divDownload").show();
                rowHtml = $("#tbTempHtml").html();

                for (var i = 0; i < list.length; i++) {

                    objItem = list[i];
                    singleHtml = rowHtml;

                    //var _date = new Date(objItem.dated);
                    //dated = ToDateFormatDDMMYYY(_date);

                    if (objItem.levelName == "11") {
                        objItem.levelName = "02 Years Post RN";
                    }
                    else if (objItem.levelName == "12") {
                        objItem.levelName = "1 Year Diploma";
                    }
                    else if (objItem.levelName == "13") {
                        objItem.levelName = "BSN Generic";
                    }

                    if (objItem.status == -1) {
                        objItem.status = "Pending";
                    }
                    else if (objItem.status == 0) {
                        objItem.status = "Rejected";
                    }
                    else if (objItem.status == 1) {
                        objItem.status = "Approved";
                    }


                    html = html + singleHtml.replace(/{#rowNum#}/g, objItem.rowNum)
                        .replace(/{#applicantId#}/g, objItem.applicantId)
                        .replace(/{#pic#}/g, objItem.pic)
                        .replace(/{#name#}/g, objItem.name)
                        .replace(/{#pmdcNo#}/g, objItem.pmdcNo)
                        .replace(/{#emailId#}/g, objItem.emailId)
                        .replace(/{#contactNumber#}/g, objItem.contactNumber)
                        .replace(/{#facultyName#}/g, objItem.levelName)
                        .replace(/{#dated#}/g, objItem.dated)
                        .replace(/{#status#}/g, objItem.status)
                        .replace(/{#dateStatus#}/g, objItem.dateStatus)
                        .replace(/{#comments#}/g, objItem.comments);
                }

                $("#tblPanel").show();
                $("#tbPanel").html(html);

                if (totalCount > 0)
                    CreatePaginationHtml(perPageRecords, totalCount, pageNum);
            }
            else {

                $("#tblPanel").hide();
                $("#tbPanel").html("");
            }

        }

        function SetValueAndValidateForm(event) {

            var isOk = true;

            if (isOk == false)
                event.preventDefault();
        }

        function ShowingRowsText(perPageRecords, count, pageNum) {

            var rcordsNow = pageNum * perPageRecords;
            var startRecords = rcordsNow - perPageRecords;
            if (rcordsNow > count)
                rcordsNow = count;

            startRecords = startRecords + 1;
            $("#divShowingResult").html("Showing " + startRecords + " to " + rcordsNow + " of " + count + " entries");


        }

        function CreatePaginationHtml(perPageRecords, count, pageNum) {



            try {

                ShowingRowsText(perPageRecords, count, pageNum);
                $("#divPagination").show();

                var htmlPagination = $("#templatePagination").html();
                var pageStart = 1, pageEnd = 5;
                var lastPage = Math.ceil(count / perPageRecords);

                if (pageNum > 3) {
                    pageStart = pageNum - 2;
                    pageEnd = pageNum + 2;
                }

                if (pageEnd > lastPage)
                    pageEnd = lastPage;

                var lisHtml = "";
                for (var i = pageStart; i <= pageEnd; i++) {
                    lisHtml = lisHtml + "<li class='liPage' id='" + i + "'> " + i + "</li>";
                }
                htmlPagination = htmlPagination.replace(/{#lastPage#}/g, lastPage).replace(/{#Pagination#}/g, lisHtml);
                $(".list_pagination").html(htmlPagination);

                $("#" + pageNum).addClass("current");



            } catch (e) {
                $("#liPagination").hide();
            }
        }

    </script>
}

<div class="col-md-12 col-sm-12  ">
    <div class="x_panel">
        @Html.HiddenFor(m => m.statusTypeId, new { @id = "hfdStatusTypeId" })
        @Html.HiddenFor(m => m.statusId, new { @id = "hfdStatusId" })
        @Html.HiddenFor(m => m.inductionId, new { @id = "hfdInductionId" })
        @Html.HiddenFor(m => m.loggedInUser.userId, new { @id = "hfdPhaseId" })
        <div class="x_title">
            <h2>Applicant List </h2>
            <div class="clearfix"></div>
        </div>
        <form class="form-horizontal form-label-left input_mask">
            <div class="form-group col-lg-12">

                @if (Model.loggedInUser.userId == 63 || Model.loggedInUser.userId == 6 || Model.loggedInUser.userId == 62 || Model.loggedInUser.typeId == 1 || Model.loggedInUser.typeId == 16)
                {
                    <div class="col-md-2 col-sm-2 col-xs-2">
                        <label for="heard">Induction :</label>
                        <select required="required" name="ddlInduction" id="ddlInduction" class="form-control" tabindex="2">
                            <option selected="selected" value="2021-2022 (Only DHQ)">2021-2022 (Only DHQ)</option>
                            <option selected="selected" value="2021-2022 (Teaching)">2021-2022 (Teaching)</option>
                            <option selected="selected" value="2020-2021 (Teaching)">2020-2021 (Teaching)</option>
                            <option selected="selected" value="2022-2023 Morning">2022-2023 Morning</option>
                        </select>
                    </div>
                    <div class="col-md-5 col-sm-5 col-xs-5">
                        <label for="heard">College :</label>
                        <select required="required" name="ddlCollege" id="ddlCollege" class="form-control" tabindex="2">
                        </select>
                    </div>
                }
                else
                {
                    <div class="col-md-7 col-sm-7 col-xs-7">
                        <label for="heard">Search :</label>
                        <input type="text" id="txtSearch" name="txtSearch" placeholder="Name, CNIC, Applicant Number" class="form-control" />
                    </div>
                }

                <div class="col-md-2 col-sm-2 col-xs-2">
                    <label for="heard" style="width:100%;">&nbsp;</label>
                    <input type="button" id="btnSearch" name="btnSearch" value="Search" class="btn btn-success" />
                </div>
                @if (Model.loggedInUser.typeId != 69)
                {
                    <div class="col-md-2 col-sm-2 col-xs-2" style="display:none" id="divDownload">
                        <label for="heard" style="width:100%;">&nbsp;</label>
                        <input type="button" id="btnDownload" onclick="exportToExcel()" name="btnDownload" value="Download" class="btn btn-success" />
                    </div>
                    <div class="col-md-2 col-sm-2 col-xs-2">
                        <label for="heard" style="width:100%;">&nbsp;</label>
                        <input type="button" id="exportButton" value="Export All" class="btn btn-success" />
                    </div>
                    <div class="col-md-2 col-sm-2 col-xs-2">
                        <label for="heard" style="width:100%;">&nbsp;</label>
                        <input type="button" id="exportButtonSeats" value="Export Seats" class="btn btn-success" />
                    </div>
                }
                @if (Model.loggedInUser.typeId == 69)
                {
                    <div class="col-md-2 col-sm-2 col-xs-2" style="display:none" id="divDownload">
                        <label for="heard" style="width:100%;">&nbsp;</label>
                        <input type="button" id="exportButton" value="Export to Excel" class="btn btn-success" />
                    </div>
                }

            </div>
            <div class="clearfix"></div>
            <div class="ln_solid"></div>
        </form>
        <div class="x_content">
            <div class="table-responsive">
                <table id="tblPanel" class="table table-striped jambo_table bulk_action" style="display:none;">
                    <thead>
                        <tr class="headings">
                            <th class="column-title">Sr. </th>
                            <th class="column-title">ID </th>
                            @if (Model.loggedInUser.typeId == 69)
                            {
                                <th class="column-title">Pic </th>
                            }
                            <th class="column-title">Name </th>
                            <th class="column-title">Email </th>
                            <th class="column-title">Number </th>
                            <th class="column-title">Applied For</th>
                            <th class="column-title">Status </th>
                            <th class="column-title">Dated </th>
                            @*<th class="column-title">Status Date </th>*@

                        </tr>
                    </thead>
                    <tbody id="tbPanel">
                    </tbody>
                </table>
                <div id="divPagination" style="display:none;">
                    <div id="msgPagination" class="col-md-4">
                        <div class="dataTables_info" id="divShowingResult">
                            Showing
                            <span id="shStart"> </span> to <span id="shEnd"> </span> of <span id="shTotal"></span>
                            entries
                        </div>
                    </div>
                    <div id="liPagination" class="col-md-8">
                        <ul class="list_pagination">
                        </ul>
                    </div>
                    <ul id="templatePagination" style="display:none;">
                        <li class='liPage' id='0' type="first"> First Page</li>
                        {#Pagination#}
                        <li class='liPage' id='0' type="last"> Last Page</li>
                    </ul>
                </div>
                <div style="display:none;">
                    <table>
                        <tbody id="tbTempHtml">
                            <tr class="tbRow" id="{#applicantId#}">
                                <td>{#rowNum#}</td>
                                <td>{#applicantId#}</td>
                                @if (Model.loggedInUser.typeId == 69)
                                {
                                    <td>
                                        <img class="imgView" src="/Images/Applicant/{#applicantId#}/{#pic#}" />
                                        <a class="ank" href="/Images/Applicant/{#applicantId#}/{#pic#}" target="_blank" title="Click to view"></a>
                                    </td>
                                }

                                <td>{#name#}</td>
                                <td>{#emailId#}</td>
                                <td>{#contactNumber#}</td>
                                <td>{#facultyName#}</td>
                                <td>{#status#} </td>
                                <td>{#dated#}  </td>
                                @*<td>{#dateStatus#}</td>*@
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

